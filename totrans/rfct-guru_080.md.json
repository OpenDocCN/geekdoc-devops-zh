["```\nif (customer == null) {\n  plan = BillingPlan.basic();\n}\nelse {\n  plan = customer.getPlan();\n}\n```", "```\nclass NullCustomer extends Customer {\n  boolean isNull() {\n    return true;\n  }\n  Plan getPlan() {\n    return new NullPlan();\n  }\n  // Some other NULL functionality.\n}\n\n// Replace null values with Null-object.\ncustomer = (order.customer != null) ?\n  order.customer : new NullCustomer();\n\n// Use Null-object as if it's normal subclass.\nplan = customer.getPlan();\n```", "```\nif (customer == null) \n{\n  plan = BillingPlan.Basic();\n}\nelse \n{\n  plan = customer.GetPlan();\n}\n```", "```\npublic sealed class NullCustomer: Customer \n{\n  public override bool IsNull \n  {\n    get { return true; }\n  }\n\n  public override Plan GetPlan() \n  {\n    return new NullPlan();\n  }\n  // Some other NULL functionality.\n}\n\n// Replace null values with Null-object.\ncustomer = order.customer ?? new NullCustomer();\n\n// Use Null-object as if it's normal subclass.\nplan = customer.GetPlan();\n```", "```\nif ($customer === null) {\n  $plan = BillingPlan::basic();\n} else {\n  $plan = $customer->getPlan();\n}\n```", "```\nclass NullCustomer extends Customer {\n  public function isNull() {\n    return true;\n  }\n  public function getPlan() {\n    return new NullPlan();\n  }\n  // Some other NULL functionality.\n}\n\n// Replace null values with Null-object.\n$customer = ($order->customer !== null) ?\n  $order->customer :\n  new NullCustomer;\n\n// Use Null-object as if it's normal subclass.\n$plan = $customer->getPlan();\n```", "```\nif customer is None:\n    plan = BillingPlan.basic()\nelse:\n    plan = customer.getPlan()\n```", "```\nclass NullCustomer(Customer):\n\n    def isNull(self):\n        return True\n\n    def getPlan(self):\n        return self.NullPlan()\n\n    # Some other NULL functionality.\n\n# Replace null values with Null-object.\ncustomer = order.customer or NullCustomer()\n\n# Use Null-object as if it's normal subclass.\nplan = customer.getPlan()\n```", "```\nif (customer == null) {\n  plan = BillingPlan.basic();\n}\nelse {\n  plan = customer.getPlan();\n}\n```", "```\nclass NullCustomer extends Customer {\n  isNull(): boolean {\n    return true;\n  }\n  getPlan(): Plan {\n    return new NullPlan();\n  }\n  // Some other NULL functionality.\n}\n\n// Replace null values with Null-object.\nlet customer = (order.customer != null) ?\n  order.customer : new NullCustomer();\n\n// Use Null-object as if it's normal subclass.\nplan = customer.getPlan();\n```"]