- en: Technical debt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/refactoring/technical-debt](https://refactoringguru.cn/refactoring/technical-debt)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Everyone does their best to write excellent code from scratch. There probably
    isn't a programmer out there who intentionally writes unclean code to the detriment
    of the project. But at what point does clean code become unclean?
  prefs: []
  type: TYPE_NORMAL
- en: The metaphor of "technical debt" in regards to unclean code was originally suggested
    by Ward Cunningham.
  prefs: []
  type: TYPE_NORMAL
- en: If you get a loan from a bank, this allows you to make purchases faster. You
    pay extra for expediting the process - you don't just pay off the principal, but
    also the additional interest on the loan. Needless to say, you can even rack up
    so much interest that the amount of interest exceeds your total income, making
    full repayment impossible.
  prefs: []
  type: TYPE_NORMAL
- en: The same thing can happen with code. You can temporarily speed up without writing
    tests for new features, but this will gradually slow your progress every day until
    you eventually pay off the debt by writing tests.
  prefs: []
  type: TYPE_NORMAL
- en: Causes of technical debt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Business pressure*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Sometimes business circumstances might force you to roll out features before
    they''re completely finished. In this case, patches and kludges will appear in
    the code to hide the unfinished parts of the project.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Lack of understanding of the consequences of technical debt*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*Sometimes your employer might not understand that technical debt has "interest"
    insofar as it slows down the pace of development as debt accumulates. This can
    make it too difficult to dedicate the team''s time to refactoring because management
    doesn''t see the value of it.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Failing to combat the strict coherence of components*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*This is when the project resembles a monolith rather than the product of individual
    modules. In this case, any changes to one part of the project will affect others.
    Team development is made more difficult because it''s difficult to isolate the
    work of individual members.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Lack of tests*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*The lack of immediate feedback encourages quick, but risky workarounds or
    kludges. In worst cases, these changes are implemented and deployed right into
    the production without any prior testing. The consequences can be catastrophic.
    For example, an innocent-looking hotfix might send a weird test email to thousands
    of customers or even worse, flush or corrupt an entire database.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Lack of documentation*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*This slows down the introduction of new people to the project and can grind
    development to a halt if key people leave the project.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Lack of interaction between team members*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*If the knowledge base isn''t distributed throughout the company, people will
    end up working with an outdated understanding of processes and information about
    the project. This situation can be exacerbated when junior developers are incorrectly
    trained by their mentors.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Long-term simultaneous development in several branches*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*This can lead to the accumulation of technical debt, which is then increased
    when changes are merged. The more changes made in isolation, the greater the total
    technical debt.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Delayed refactoring*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*The project''s requirements are constantly changing and at some point it may
    become obvious that parts of the code are obsolete, have become cumbersome, and
    must be redesigned to meet new requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the project's programmers are writing new code every day
    that works with the obsolete parts. Therefore, the longer refactoring is delayed,
    the more dependent code will have to be reworked in the future.
  prefs: []
  type: TYPE_NORMAL
- en: '*Lack of compliance monitoring*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*This happens when everyone working on the project writes code as they see
    fit (i.e. the same way they wrote the last project).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Incompetence*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*This is when the developer just doesn''t know how to write decent code.**********'
  prefs: []
  type: TYPE_NORMAL
