- en: Replace Inheritance with Delegation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/replace-inheritance-with-delegation](https://refactoringguru.cn/replace-inheritance-with-delegation)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have a subclass that uses only a portion of the methods of its superclass
    (or it's not possible to inherit superclass data).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a field and put a superclass object in it, delegate methods to the superclass
    object, and get rid of inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: Before![Replace Inheritance with Delegation - Before](../Images/887b3d17bf4bf2eb1f074688663e172a.png)After![Replace
    Inheritance with Delegation - After](../Images/0846621a97f4d93ff403f4d12e083f9c.png)
  prefs: []
  type: TYPE_NORMAL
- en: Why Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Replacing inheritance with composition can substantially improve class design
    if:'
  prefs: []
  type: TYPE_NORMAL
- en: Your subclass violates the *Liskov substitution principle*, i.e., if inheritance
    was implemented only to combine common code but not because the subclass is an
    extension of the superclass.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The subclass uses only a portion of the methods of the superclass. In this case,
    it's only a matter of time before someone calls a superclass method that he or
    she wasn't supposed to call.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In essence, this refactoring technique splits both classes and makes the superclass
    the helper of the subclass, not its parent. Instead of inheriting all superclass
    methods, the subclass will have only the necessary methods for delegating to the
    methods of the superclass object.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A class doesn't contain any unneeded methods inherited from the superclass.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various objects with various implementations can be put in the delegate field.
    In effect you get the [Strategy](/design-patterns/strategy) design pattern.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have to write many simple delegating methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a field in the subclass for holding the superclass. During the initial
    stage, place the current object in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the subclass methods so that they use the superclass object instead of
    `this`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For methods inherited from the superclass that are called in the client code,
    create simple delegating methods in the subclass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the inheritance declaration from the subclass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the initialization code of the field in which the former superclass is
    stored by creating a new object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
