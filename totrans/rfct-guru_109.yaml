- en: Replace Delegation with Inheritance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/replace-delegation-with-inheritance](https://refactoringguru.cn/replace-delegation-with-inheritance)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A class contains many simple methods that delegate to all methods of another
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make the class a delegate inheritor, which makes the delegating methods unnecessary.
  prefs: []
  type: TYPE_NORMAL
- en: Before![Replace Delegation with Inheritance - Before](../Images/c94d57d4804776252ae243dc24eba82f.png)After![Replace
    Delegation with Inheritance - After](../Images/f6fff96ce905e33ab4e474a8d7bdc4a5.png)
  prefs: []
  type: TYPE_NORMAL
- en: Why Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Delegation is a more flexible approach than inheritance, since it allows changing
    how delegation is implemented and placing other classes there as well. Nonetheless,
    delegation stops being beneficial if you delegate actions to only one class and
    all of its public methods.
  prefs: []
  type: TYPE_NORMAL
- en: In such a case, if you replace delegation with inheritance, you cleanse the
    class of a large number of delegating methods and spare yourself from needing
    to create them for each new delegate class method.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reduces code length. All these delegating methods are no longer necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When Not to Use
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't use this technique if the class contains delegation to only a portion
    of the public methods of the delegate class. By doing so, you would violate the
    *Liskov substitution principle*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This technique can be used only if the class still doesn't have parents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make the class a subclass of the delegate class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the current object in a field containing a reference to the delegate object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the methods with simple delegation one by one. If their names were different,
    use [Rename Method](/rename-method) to give all the methods a single name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace all references to the delegate field with references to the current
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the delegate field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
