- en: Pull Up Constructor Body
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/pull-up-constructor-body](https://refactoringguru.cn/pull-up-constructor-body)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your subclasses have constructors with code that's mostly identical.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a superclass constructor and move the code that's the same in the subclasses
    to it. Call the superclass constructor in the subclass constructors.
  prefs: []
  type: TYPE_NORMAL
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Why Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How is this refactoring technique different from [Pull Up Method](/pull-up-method)?
  prefs: []
  type: TYPE_NORMAL
- en: In Java, subclasses can't inherit a constructor, so you can't simply apply [Pull
    Up Method](/pull-up-method) to the subclass constructor and delete it after removing
    all the constructor code to the superclass. In addition to creating a constructor
    in the superclass it's necessary to have constructors in the subclasses with simple
    delegation to the superclass constructor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In C++ and Java (if you didn't explicitly call the superclass constructor) the
    superclass constructor is automatically called prior to the subclass constructor,
    which makes it necessary to move the common code only from the beginning of the
    subclass constructors (since you won't be able to call the superclass constructor
    from an arbitrary place in a subclass constructor).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In most programming languages, a subclass constructor can have its own list
    of parameters different from the parameters of the superclass. Therefore you should
    create a superclass constructor only with the parameters that it truly needs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a constructor in a superclass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the common code from the beginning of the constructor of each subclass
    to the superclass constructor. Before doing so, try to move as much common code
    as possible to the beginning of the constructor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the call for the superclass constructor in the first line in the subclass
    constructors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
