- en: Replace Subclass with Fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/replace-subclass-with-fields](https://refactoringguru.cn/replace-subclass-with-fields)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have subclasses differing only in their (constant-returning) methods.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Replace the methods with fields in the parent class and delete the subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: Before![Replace Subclass with Fields - Before](../Images/930cf3518d32cfbe157da891e57274b8.png)After![Replace
    Subclass with Fields - After](../Images/05e0e2ebf14b5a93cdc0808d5c022055.png)
  prefs: []
  type: TYPE_NORMAL
- en: Why Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes refactoring is just the ticket for avoiding type code.
  prefs: []
  type: TYPE_NORMAL
- en: In one such case, a hierarchy of subclasses may be different only in the values
    returned by particular methods. These methods aren't even the result of computation,
    but are strictly set out in the methods themselves or in the fields returned by
    the methods. To simplify the class architecture, this hierarchy can be compressed
    into a single class containing one or several fields with the necessary values,
    based on the situation.
  prefs: []
  type: TYPE_NORMAL
- en: These changes may become necessary after moving a large amount of functionality
    from a class hierarchy to another place. The current hierarchy is no longer so
    valuable and its subclasses are now just dead weight.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Simplifies system architecture. Creating subclasses is overkill if all you want
    to do is to return different values in different methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apply [Replace Constructor with Factory Method](/replace-constructor-with-factory-method)
    to the subclasses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace subclass constructor calls with superclass factory method calls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the superclass, declare fields for storing the values of each of the subclass
    methods that return constant values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a protected superclass constructor for initializing the new fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create or modify the existing subclass constructors so that they call the new
    constructor of the parent class and pass the relevant values to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement each constant method in the parent class so that it returns the value
    of the corresponding field. Then remove the method from the subclass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the subclass constructor has additional functionality, use [Inline Method](/inline-method)
    to incorporate the constructor into the superclass factory method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the subclass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
