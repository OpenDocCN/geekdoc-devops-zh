- en: Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/smells/comments](https://refactoringguru.cn/smells/comments)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Signs and Symptoms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A method is filled with explanatory comments.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8e5f0094c7bdcf4a0c4e6c213ad8fc48.png)'
  prefs: []
  type: TYPE_IMG
- en: Reasons for the Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Comments are usually created with the best of intentions, when the author realizes
    that his or her code isn't intuitive or obvious. In such cases, comments are like
    a deodorant masking the smell of fishy code that could be improved.
  prefs: []
  type: TYPE_NORMAL
- en: The best comment is a good name for a method or class.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you feel that a code fragment can't be understood without comments, try to
    change the code structure in a way that makes comments unnecessary.
  prefs: []
  type: TYPE_NORMAL
- en: Treatment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If a comment is intended to explain a complex expression, the expression should
    be split into understandable subexpressions using [Extract Variable](/extract-variable).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a comment explains a section of code, this section can be turned into a separate
    method via [Extract Method](/extract-method). The name of the new method can be
    taken from the comment text itself, most likely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a method has already been extracted, but comments are still necessary to
    explain what the method does, give the method a self-explanatory name. Use [Rename
    Method](/rename-method) for this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to assert rules about a state that's necessary for the system to
    work, use [Introduce Assertion](/introduce-assertion).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payoff
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Code becomes more intuitive and obvious.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/985d9e0b169b2aa6a13c1d325556ba35.png)'
  prefs: []
  type: TYPE_IMG
- en: When to Ignore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Comments can sometimes be useful:'
  prefs: []
  type: TYPE_NORMAL
- en: When explaining **why** something is being implemented in a particular way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When explaining complex algorithms (when all other methods for simplifying the
    algorithm have been tried and come up short).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
