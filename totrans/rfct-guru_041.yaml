- en: Extract Variable
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取变量
- en: 原文：[https://refactoringguru.cn/extract-variable](https://refactoringguru.cn/extract-variable)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://refactoringguru.cn/extract-variable](https://refactoringguru.cn/extract-variable)
- en: Problem
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: You have an expression that's hard to understand.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个难以理解的表达式。
- en: Solution
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: Place the result of the expression or its parts in separate variables that are
    self-explanatory.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将表达式或其部分的结果放在自解释的单独变量中。
- en: Before
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 之前
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 之后
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Before
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 之前
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 之后
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Before
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 之前
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 之后
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Before
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 之前
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 之后
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Before
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 之前
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 之后
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Why Refactor
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么重构
- en: 'The main reason for extracting variables is to make a complex expression more
    understandable, by dividing it into its intermediate parts. These could be:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 提取变量的主要原因是使复杂表达式更易于理解，通过将其划分为中间部分。这些可以是：
- en: Condition of the `if()` operator or a part of the `?:` operator in C-based languages
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C语言中 `if()` 运算符的条件或 `?:` 运算符的一部分
- en: A long arithmetic expression without intermediate results
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个没有中间结果的长算术表达式
- en: Long multipart lines
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长多部分行
- en: Extracting a variable may be the first step towards performing [Extract Method](/extract-method)
    if you see that the extracted expression is used in other places in your code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到提取的表达式在代码的其他地方被使用，提取变量可能是执行 [提取方法](/extract-method) 的第一步。
- en: Benefits
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 好处
- en: More readable code! Try to give the extracted variables good names that announce
    the variable's purpose loud and clear. More readability, fewer long-winded comments.
    Go for names like `customerTaxValue`, `cityUnemploymentRate`, `clientSalutationString`,
    etc.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更易读的代码！尝试给提取的变量命名，以清晰地表明变量的目的。提高可读性，减少冗长的注释。选择像 `customerTaxValue`、`cityUnemploymentRate`、`clientSalutationString`
    等名称。
- en: Drawbacks
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺点
- en: More variables are present in your code. But this is counterbalanced by the
    ease of reading your code.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的代码中存在更多变量。但这被代码的可读性所抵消。
- en: When refactoring conditional expressions, remember that the compiler will most
    likely optimize it to minimize the amount of calculations needed to establish
    the resulting value. Say you have a following expression `if (a() || b()) ...`.
    The program won't call the method `b` if the method `a` returns `true` because
    the resulting value will still be `true`, no matter what value returns `b`.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在重构条件表达式时，请记住编译器很可能会优化它，以最小化计算结果值所需的计算量。假设你有以下表达式 `if (a() || b()) ...`。如果方法
    `a` 返回 `true`，程序将不会调用方法 `b`，因为结果值仍然是 `true`，无论 `b` 返回什么值。
- en: However, if you extract parts of this expression into variables, both methods
    will always be called, which might hurt performance of the program, especially
    if these methods do some heavyweight work.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，如果你将该表达式的部分提取到变量中，两个方法将始终被调用，这可能会影响程序的性能，特别是如果这些方法进行了一些重负载的工作。
- en: How to Refactor
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何重构
- en: Insert a new line before the relevant expression and declare a new variable
    there. Assign part of the complex expression to this variable.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相关表达式之前插入新行并在此声明新变量。将复杂表达式的一部分赋值给该变量。
- en: Replace that part of the expression with the new variable.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用新变量替换表达式的那部分。
- en: Repeat the process for all complex parts of the expression.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对表达式中的所有复杂部分重复此过程。
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
- en: Your browser does not support HTML video.](/refactoring/course)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你的浏览器不支持HTML视频。](/refactoring/course)
- en: Tired of reading?
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 厌倦了阅读？
- en: No wonder, it takes 7 hours to read all of the text we have here.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 不奇怪，阅读我们这里的所有文本需要7小时。
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试我们的交互式重构课程。这提供了一种不那么乏味的学习新知识的方法。
- en: '[*Let''s see…*](/refactoring/course)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[*让我们看看…*](/refactoring/course)'
