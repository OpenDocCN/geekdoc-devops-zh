- en: Introduce Parameter Object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/introduce-parameter-object](https://refactoringguru.cn/introduce-parameter-object)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your methods contain a repeating group of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Replace these parameters with an object.
  prefs: []
  type: TYPE_NORMAL
- en: Before![Introduce Parameter Object - Before](../Images/7d585b485fa68c7c1717986c140f8bc1.png)After![Introduce
    Parameter Object - After](../Images/8f3eac881ef6934d91e9f0e4dee12d4e.png)
  prefs: []
  type: TYPE_NORMAL
- en: Why Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Identical groups of parameters are often encountered in multiple methods. This
    causes code duplication of both the parameters themselves and of related operations.
    By consolidating parameters in a single class, you can also move the methods for
    handling this data there as well, freeing the other methods from this code.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More readable code. Instead of a hodgepodge of parameters, you see a single
    object with a comprehensible name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Identical groups of parameters scattered here and there create their own kind
    of code duplication: while identical code isn''t being called, identical groups
    of parameters and arguments are constantly encountered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you move only data to a new class and don't plan to move any behaviors or
    related operations there, this begins to smell of a [Data Class](/smells/data-class).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new class that will represent your group of parameters. Make the class
    immutable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the method that you want to refactor, use [Add Parameter](/add-parameter),
    which is where your parameter object will be passed. In all method calls, pass
    the object created from old method parameters to this parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now start deleting old parameters from the method one by one, replacing them
    in the code with fields of the parameter object. Test the program after each parameter
    replacement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When done, see whether there's any point in moving a part of the method (or
    sometimes even the whole method) to a parameter object class. If so, use [Move
    Method](/move-method) or [Extract Method](/extract-method).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
