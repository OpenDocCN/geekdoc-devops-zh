- en: Extract Superclass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/extract-superclass](https://refactoringguru.cn/extract-superclass)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have two classes with common fields and methods.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a shared superclass for them and move all the identical fields and methods
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: Before![Extract Superclass - Before](../Images/e214bf02725cd535c72bb7d29b0530ea.png)After![Extract
    Superclass - After](../Images/84c18b2581760e89abfac2f645def8a7.png)
  prefs: []
  type: TYPE_NORMAL
- en: Why Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One type of code duplication occurs when two classes perform similar tasks in
    the same way, or perform similar tasks in different ways. Objects offer a built-in
    mechanism for simplifying such situations via inheritance. But oftentimes this
    similarity remains unnoticed until classes are created, necessitating that an
    inheritance structure be created later.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Code deduplication. Common fields and methods now "live" in one place only.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When Not to Use
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can not apply this technique to classes that already have a superclass.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create an abstract superclass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use [Pull Up Field](/pull-up-field), [Pull Up Method](/pull-up-method), and
    [Pull Up Constructor Body](/pull-up-constructor-body) to move the common functionality
    to a superclass. Start with the fields, since in addition to the common fields
    you will need to move the fields that are used in the common methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for places in the client code where use of subclasses can be replaced with
    your new class (such as in type declarations).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
