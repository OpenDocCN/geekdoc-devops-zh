- en: Add Parameter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/add-parameter](https://refactoringguru.cn/add-parameter)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A method doesn't have enough data to perform certain actions.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new parameter to pass the necessary data.
  prefs: []
  type: TYPE_NORMAL
- en: Before![Add Parameter - Before](../Images/85673ed91b234f275908bb20779e2f0b.png)After![Add
    Parameter - After](../Images/30e823c4959ae379ad1ef0828b32ef8d.png)
  prefs: []
  type: TYPE_NORMAL
- en: Why Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to make changes to a method and these changes require adding information
    or data that was previously not available to the method.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The choice here is between adding a new parameter and adding a new private field
    that contains the data needed by the method. A parameter is preferable when you
    need some occasional or frequently changing data for which there's no point in
    holding it in an object all of the time. In this case, the refactoring will pay
    off. Otherwise, add a private field and fill it with the necessary data before
    calling the method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adding a new parameter is always easier than removing it, which is why parameter
    lists frequently balloon to grotesque sizes. This smell is known as the [Long
    Parameter List](/smells/long-parameter-list).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to add a new parameter, sometimes this means that your class doesn't
    contain the necessary data or the existing parameters don't contain the necessary
    related data. In both cases, the best solution is to consider moving data to the
    main class or to other classes whose objects are already accessible from inside
    the method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See whether the method is defined in a superclass or subclass. If the method
    is present in them, you will need to repeat all the steps in these classes as
    well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following step is critical for keeping your program functional during the
    refactoring process. Create a new method by copying the old one and add the necessary
    parameter to it. Replace the code for the old method with a call to the new method.
    You can plug in any value to the new parameter (such as `null` for objects or
    a zero for numbers).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find all references to the old method and replace them with references to the
    new method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the old method. Deletion isn't possible if the old method is part of
    the public interface. If that's the case, mark the old method as deprecated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
