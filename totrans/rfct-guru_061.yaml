- en: Change Reference to Value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/change-reference-to-value](https://refactoringguru.cn/change-reference-to-value)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have a reference object that's too small and infrequently changed to justify
    managing its life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Turn it into a value object.
  prefs: []
  type: TYPE_NORMAL
- en: Before![Change Reference to Value - Before](../Images/e7906b084feeb396f2cd25ed48d33cb9.png)After![Change
    Reference to Value - After](../Images/5911d31e184e3a40c69041add44067fc.png)
  prefs: []
  type: TYPE_NORMAL
- en: Why Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Inspiration to switch from a reference to a value may come from the inconvenience
    of working with the reference. References require management on your part:'
  prefs: []
  type: TYPE_NORMAL
- en: They always require requesting the necessary object from storage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References in memory may be inconvenient to work with.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with references is particularly difficult, compared to values, on distributed
    and parallel systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Values are especially useful if you would rather have unchangeable objects than
    objects whose state may change during their lifetime.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One important property of objects is that they should be unchangeable. The same
    result should be received for each query that returns an object value. If this
    is true, no problems arise if there are many objects representing the same thing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Values are much easier to implement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If a value is changeable, make sure if any object changes that the values in
    all the other objects representing the same entity are updated. This is so burdensome
    that it's easier to create a reference for this purpose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make the object unchangeable. The object shouldn't have any setters or other
    methods that change its state and data ([Remove Setting Method](/remove-setting-method)
    may help here). The only place where data should be assigned to the fields of
    a value object is a constructor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a comparison method to be able to compare two values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check whether you can delete the factory method and make the object constructor
    public.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
