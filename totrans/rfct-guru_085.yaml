- en: Remove Parameter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/remove-parameter](https://refactoringguru.cn/remove-parameter)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A parameter isn't used in the body of a method.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remove the unused parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Before![Remove Parameter - Before](../Images/a0e29cd0565449ab615e942c7979ed8a.png)After![Remove
    Parameter - After](../Images/954f86863272616075c29480018a53a1.png)
  prefs: []
  type: TYPE_NORMAL
- en: Why Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every parameter in a method call forces the programmer reading it to figure
    out what information is found in this parameter. And if a parameter is entirely
    unused in the method body, this "noggin scratching" is for naught.
  prefs: []
  type: TYPE_NORMAL
- en: And in any case, additional parameters are extra code that has to be run.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes we add parameters with an eye to the future, anticipating changes
    to the method for which the parameter might be needed. All the same, experience
    shows that it's better to add a parameter only when it's genuinely needed. After
    all, anticipated changes often remain just that—anticipated.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A method contains only the parameters that it truly requires.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When Not to Use
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the method is implemented in different ways in subclasses or in a superclass,
    and your parameter is used in those implementations, leave the parameter as-is.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See whether the method is defined in a superclass or subclass. If so, is the
    parameter used there? If the parameter is used in one of these implementations,
    hold off on this refactoring technique.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is important for keeping the program functional during the refactoring
    process. Create a new method by copying the old one and delete the relevant parameter
    from it. Replace the code of the old method with a call to the new one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find all references to the old method and replace them with references to the
    new method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the old method. Don't perform this step if the old method is part of
    a public interface. In this case, mark the old method as deprecated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
