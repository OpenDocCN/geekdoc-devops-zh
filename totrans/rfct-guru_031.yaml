- en: Feature Envy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/smells/feature-envy](https://refactoringguru.cn/smells/feature-envy)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Signs and Symptoms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A method accesses the data of another object more than its own data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/87d286f1ec233b36dd207476329160ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Reasons for the Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This smell may occur after fields are moved to a data class. If this is the
    case, you may want to move the operations on data to this class as well.
  prefs: []
  type: TYPE_NORMAL
- en: Treatment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a basic rule, if things change at the same time, you should keep them in
    the same place. Usually data and functions that use this data are changed together
    (although exceptions are possible).
  prefs: []
  type: TYPE_NORMAL
- en: If a method clearly should be moved to another place, use [Move Method](/move-method).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If only part of a method accesses the data of another object, use [Extract Method](/extract-method)
    to move the part in question.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a method uses functions from several other classes, first determine which
    class contains most of the data used. Then place the method in this class along
    with the other data. Alternatively, use [Extract Method](/extract-method) to split
    the method into several parts that can be placed in different places in different
    classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/ce8c2259c2ce5eb1f7188a12648322a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Payoff
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Less code duplication (if the data handling code is put in a central place).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better code organization (methods for handling data are next to the actual data).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/85606fc9f7a9d66f8d0e9cfe3e622e78.png)'
  prefs: []
  type: TYPE_IMG
- en: When to Ignore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes behavior is purposefully kept separate from the class that holds the
    data. The usual advantage of this is the ability to dynamically change the behavior
    (see [Strategy](/design-patterns/strategy), [Visitor](/design-patterns/visitor)
    and other patterns).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
