["```\nclass Bird {\n  // ...\n  double getSpeed() {\n    switch (type) {\n      case EUROPEAN:\n        return getBaseSpeed();\n      case AFRICAN:\n        return getBaseSpeed() - getLoadFactor() * numberOfCoconuts;\n      case NORWEGIAN_BLUE:\n        return (isNailed) ? 0 : getBaseSpeed(voltage);\n    }\n    throw new RuntimeException(\"Should be unreachable\");\n  }\n}\n```", "```\nabstract class Bird {\n  // ...\n  abstract double getSpeed();\n}\n\nclass European extends Bird {\n  double getSpeed() {\n    return getBaseSpeed();\n  }\n}\nclass African extends Bird {\n  double getSpeed() {\n    return getBaseSpeed() - getLoadFactor() * numberOfCoconuts;\n  }\n}\nclass NorwegianBlue extends Bird {\n  double getSpeed() {\n    return (isNailed) ? 0 : getBaseSpeed(voltage);\n  }\n}\n\n// Somewhere in client code\nspeed = bird.getSpeed();\n```", "```\npublic class Bird \n{\n  // ...\n  public double GetSpeed() \n  {\n    switch (type) \n    {\n      case EUROPEAN:\n        return GetBaseSpeed();\n      case AFRICAN:\n        return GetBaseSpeed() - GetLoadFactor() * numberOfCoconuts;\n      case NORWEGIAN_BLUE:\n        return isNailed ? 0 : GetBaseSpeed(voltage);\n      default:\n        throw new Exception(\"Should be unreachable\");\n    }\n  }\n}\n```", "```\npublic abstract class Bird \n{\n  // ...\n  public abstract double GetSpeed();\n}\n\nclass European: Bird \n{\n  public override double GetSpeed() \n  {\n    return GetBaseSpeed();\n  }\n}\nclass African: Bird \n{\n  public override double GetSpeed() \n  {\n    return GetBaseSpeed() - GetLoadFactor() * numberOfCoconuts;\n  }\n}\nclass NorwegianBlue: Bird\n{\n  public override double GetSpeed() \n  {\n    return isNailed ? 0 : GetBaseSpeed(voltage);\n  }\n}\n\n// Somewhere in client code\nspeed = bird.GetSpeed();\n```", "```\nclass Bird {\n  // ...\n  public function getSpeed() {\n    switch ($this->type) {\n      case EUROPEAN:\n        return $this->getBaseSpeed();\n      case AFRICAN:\n        return $this->getBaseSpeed() - $this->getLoadFactor() * $this->numberOfCoconuts;\n      case NORWEGIAN_BLUE:\n        return ($this->isNailed) ? 0 : $this->getBaseSpeed($this->voltage);\n    }\n    throw new Exception(\"Should be unreachable\");\n  }\n  // ...\n}\n```", "```\nabstract class Bird {\n  // ...\n  abstract function getSpeed();\n  // ...\n}\n\nclass European extends Bird {\n  public function getSpeed() {\n    return $this->getBaseSpeed();\n  }\n}\nclass African extends Bird {\n  public function getSpeed() {\n    return $this->getBaseSpeed() - $this->getLoadFactor() * $this->numberOfCoconuts;\n  }\n}\nclass NorwegianBlue extends Bird {\n  public function getSpeed() {\n    return ($this->isNailed) ? 0 : $this->getBaseSpeed($this->voltage);\n  }\n}\n\n// Somewhere in Client code.\n$speed = $bird->getSpeed();\n```", "```\nclass Bird:\n    # ...\n    def getSpeed(self):\n        if self.type == EUROPEAN:\n            return self.getBaseSpeed()\n        elif self.type == AFRICAN:\n            return self.getBaseSpeed() - self.getLoadFactor() * self.numberOfCoconuts\n        elif self.type == NORWEGIAN_BLUE:\n            return 0 if self.isNailed else self.getBaseSpeed(self.voltage)\n        else:\n            raise Exception(\"Should be unreachable\")\n```", "```\nclass Bird:\n    # ...\n    def getSpeed(self):\n        pass\n\nclass European(Bird):\n    def getSpeed(self):\n        return self.getBaseSpeed()\n\nclass African(Bird):\n    def getSpeed(self):\n        return self.getBaseSpeed() - self.getLoadFactor() * self.numberOfCoconuts\n\nclass NorwegianBlue(Bird):\n    def getSpeed(self):\n        return 0 if self.isNailed else self.getBaseSpeed(self.voltage)\n\n# Somewhere in client code\nspeed = bird.getSpeed()\n```", "```\nclass Bird {\n  // ...\n  getSpeed(): number {\n    switch (type) {\n      case EUROPEAN:\n        return getBaseSpeed();\n      case AFRICAN:\n        return getBaseSpeed() - getLoadFactor() * numberOfCoconuts;\n      case NORWEGIAN_BLUE:\n        return (isNailed) ? 0 : getBaseSpeed(voltage);\n    }\n    throw new Error(\"Should be unreachable\");\n  }\n}\n```", "```\nabstract class Bird {\n  // ...\n  abstract getSpeed(): number;\n}\n\nclass European extends Bird {\n  getSpeed(): number {\n    return getBaseSpeed();\n  }\n}\nclass African extends Bird {\n  getSpeed(): number {\n    return getBaseSpeed() - getLoadFactor() * numberOfCoconuts;\n  }\n}\nclass NorwegianBlue extends Bird {\n  getSpeed(): number {\n    return (isNailed) ? 0 : getBaseSpeed(voltage);\n  }\n}\n\n// Somewhere in client code\nlet speed = bird.getSpeed();\n```"]