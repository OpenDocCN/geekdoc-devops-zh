- en: Decompose Conditional
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分解条件
- en: 原文：[https://refactoringguru.cn/decompose-conditional](https://refactoringguru.cn/decompose-conditional)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://refactoringguru.cn/decompose-conditional](https://refactoringguru.cn/decompose-conditional)
- en: Problem
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题
- en: You have a complex conditional (`if-then`/`else` or `switch`).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个复杂的条件（`if-then`/`else`或`switch`）。
- en: Solution
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Decompose the complicated parts of the conditional into separate methods: the
    condition, `then` and `else`.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将条件的复杂部分分解为单独的方法：条件、`then`和`else`。
- en: Before
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 之前
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 之后
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Before
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 之前
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 之后
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Before
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 之前
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 之后
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Before
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 之前
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 之后
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Before
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 之前
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 之后
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Why Refactor
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么重构
- en: 'The longer a piece of code is, the harder it''s to understand. Things become
    even more hard to understand when the code is filled with conditions:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 代码越长，理解起来就越困难。当代码充满条件时，事情变得更加难以理解：
- en: While you're busy figuring out what the code in the `then` block does, you forget
    what the relevant condition was.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你忙于弄清楚`then`块中的代码时，你会忘记相关条件是什么。
- en: While you're busy parsing `else`, you forget what the code in `then` does.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你忙于解析`else`时，你会忘记`then`中的代码做了什么。
- en: Benefits
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 好处
- en: By extracting conditional code to clearly named methods, you make life easier
    for the person who'll be maintaining the code later (such as you, two months from
    now!).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将条件代码提取到明确命名的方法中，你为将来维护代码的人（比如两个月后的你）简化了工作。
- en: This refactoring technique is also applicable for short expressions in conditions.
    The string `isSalaryDay()` is much prettier and more descriptive than code for
    comparing dates.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个重构技术也适用于条件中的短表达式。字符串`isSalaryDay()`比用于比较日期的代码要美观且更具描述性。
- en: How to Refactor
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何重构
- en: Extract the conditional to a separate method via [Extract Method](/extract-method).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过[提取方法](/extract-method)将条件提取到单独的方法中。
- en: Repeat the process for the `then` and `else` blocks.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`then`和`else`块重复此过程。
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
- en: Your browser does not support HTML video.](/refactoring/course)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你的浏览器不支持HTML视频。](/refactoring/course)
- en: Tired of reading?
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读腻了吗？
- en: No wonder, it takes 7 hours to read all of the text we have here.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不奇怪，阅读我们这里的所有文本需要7个小时。
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试我们的互动重构课程。这提供了一种不那么乏味的学习新知识的方法。
- en: '[*Let''s see…*](/refactoring/course)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[*我们来看看…*](/refactoring/course)'
