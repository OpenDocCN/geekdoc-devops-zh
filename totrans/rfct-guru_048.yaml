- en: Moving Features between Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/refactoring/techniques/moving-features-between-objects](https://refactoringguru.cn/refactoring/techniques/moving-features-between-objects)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Even if you have distributed functionality among different classes in a less-than-perfect
    way, there's still hope.
  prefs: []
  type: TYPE_NORMAL
- en: These refactoring techniques show how to safely move functionality between classes,
    create new classes, and hide implementation details from public access.
  prefs: []
  type: TYPE_NORMAL
- en: '[Move Method](/move-method)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem:** A method is used more in another class than in its own class.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:** Create a new method in the class that uses the method the most,
    then move code from the old method to there. Turn the code of the original method
    into a reference to the new method in the other class or else remove it entirely.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Move Field](/move-field)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem:** A field is used more in another class than in its own class.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:** Create a field in a new class and redirect all users of the old
    field to it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Extract Class](/extract-class)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem:** When one class does the work of two, awkwardness results.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:** Instead, create a new class and place the fields and methods
    responsible for the relevant functionality in it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Inline Class](/inline-class)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem:** A class does almost nothing and isn''t responsible for anything,
    and no additional responsibilities are planned for it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:** Move all features from the class to another one.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Hide Delegate](/hide-delegate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem:** The client gets object B from a field or method of object А. Then
    the client calls a method of object B.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:** Create a new method in class A that delegates the call to object
    B. Now the client doesn''t know about, or depend on, class B.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Remove Middle Man](/remove-middle-man)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem:** A class has too many methods that simply delegate to other objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:** Delete these methods and force the client to call the end methods
    directly.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Introduce Foreign Method](/introduce-foreign-method)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem:** A utility class doesn''t contain the method that you need and
    you can''t add the method to the class.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:** Add the method to a client class and pass an object of the utility
    class to it as an argument.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Introduce Local Extension](/introduce-local-extension)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem:** A utility class doesn''t contain some methods that you need. But
    you can''t add these methods to the class.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution:** Create a new class containing the methods and make it either
    the child or wrapper of the utility class.'
  prefs: []
  type: TYPE_NORMAL
