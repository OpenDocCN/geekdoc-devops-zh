- en: Replace Nested Conditional with Guard Clauses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/replace-nested-conditional-with-guard-clauses](https://refactoringguru.cn/replace-nested-conditional-with-guard-clauses)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have a group of nested conditionals and it's hard to determine the normal
    flow of code execution.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Isolate all special checks and edge cases into separate clauses and place them
    before the main checks. Ideally, you should have a "flat" list of conditionals,
    one after the other.
  prefs: []
  type: TYPE_NORMAL
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Why Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spotting the "conditional from hell" is fairly easy. The indentations of each
    level of nestedness form an arrow, pointing to the right in the direction of pain
    and woe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It's difficult to figure out what each conditional does and how, since the "normal"
    flow of code execution isn't immediately obvious. These conditionals indicate
    helter-skelter evolution, with each condition added as a stopgap measure without
    any thought paid to optimizing the overall structure.
  prefs: []
  type: TYPE_NORMAL
- en: To simplify the situation, isolate the special cases into separate conditions
    that immediately end execution and return a null value if the guard clauses are
    true. In effect, your mission here is to make the structure flat.
  prefs: []
  type: TYPE_NORMAL
- en: How to Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try to rid the code of side effects—[Separate Query from Modifier](/separate-query-from-modifier)
    may be helpful for the purpose. This solution will be necessary for the reshuffling
    described below.
  prefs: []
  type: TYPE_NORMAL
- en: Isolate all guard clauses that lead to calling an exception or immediate return
    of a value from the method. Place these conditions at the beginning of the method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After rearrangement is complete and all tests are successfully completed, see
    whether you can use [Consolidate Conditional Expression](/consolidate-conditional-expression)
    for guard clauses that lead to the same exceptions or returned values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
