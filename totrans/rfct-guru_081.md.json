["```\ndouble getExpenseLimit() {\n  // Should have either expense limit or\n  // a primary project.\n  return (expenseLimit != NULL_EXPENSE) ?\n    expenseLimit :\n    primaryProject.getMemberExpenseLimit();\n}\n```", "```\ndouble getExpenseLimit() {\n  Assert.isTrue(expenseLimit != NULL_EXPENSE || primaryProject != null);\n\n  return (expenseLimit != NULL_EXPENSE) ?\n    expenseLimit:\n    primaryProject.getMemberExpenseLimit();\n}\n```", "```\ndouble GetExpenseLimit() \n{\n  // Should have either expense limit or\n  // a primary project.\n  return (expenseLimit != NULL_EXPENSE) ?\n    expenseLimit :\n    primaryProject.GetMemberExpenseLimit();\n}\n```", "```\ndouble GetExpenseLimit() \n{\n  Assert.IsTrue(expenseLimit != NULL_EXPENSE || primaryProject != null);\n\n  return (expenseLimit != NULL_EXPENSE) ?\n    expenseLimit:\n    primaryProject.GetMemberExpenseLimit();\n}\n```", "```\nfunction getExpenseLimit() {\n  // Should have either expense limit or\n  // a primary project.\n  return ($this->expenseLimit !== NULL_EXPENSE) ?\n    $this->expenseLimit:\n    $this->primaryProject->getMemberExpenseLimit();\n}\n```", "```\nfunction getExpenseLimit() {\n  assert($this->expenseLimit !== NULL_EXPENSE || isset($this->primaryProject));\n\n  return ($this->expenseLimit !== NULL_EXPENSE) ?\n    $this->expenseLimit:\n    $this->primaryProject->getMemberExpenseLimit();\n}\n```", "```\ndef getExpenseLimit(self):\n    # Should have either expense limit or\n    # a primary project.\n    return self.expenseLimit if self.expenseLimit != NULL_EXPENSE else \\\n        self.primaryProject.getMemberExpenseLimit()\n```", "```\ndef getExpenseLimit(self):\n    assert (self.expenseLimit != NULL_EXPENSE) or (self.primaryProject != None)\n\n    return self.expenseLimit if (self.expenseLimit != NULL_EXPENSE) else \\\n        self.primaryProject.getMemberExpenseLimit()\n```", "```\ngetExpenseLimit(): number {\n  // Should have either expense limit or\n  // a primary project.\n  return (expenseLimit != NULL_EXPENSE) ?\n    expenseLimit:\n    primaryProject.getMemberExpenseLimit();\n}\n```", "```\ngetExpenseLimit(): number {\n  // TypeScript and JS doesn't have built-in assertions, so we'll use\n  // good-old console.error(). You can always extract this into a\n  // designated assertion function.\n  if (!(expenseLimit != NULL_EXPENSE ||\n       (typeof primaryProject !== 'undefined' && primaryProject))) {\n      console.error(\"Assertion failed: getExpenseLimit()\");\n  }\n\n  return (expenseLimit != NULL_EXPENSE) ?\n    expenseLimit:\n    primaryProject.getMemberExpenseLimit();\n}\n```"]