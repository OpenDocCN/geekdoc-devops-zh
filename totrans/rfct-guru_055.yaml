- en: Introduce Foreign Method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/introduce-foreign-method](https://refactoringguru.cn/introduce-foreign-method)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A utility class doesn't contain the method that you need and you can't add the
    method to the class.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add the method to a client class and pass an object of the utility class to
    it as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Before
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Why Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have code that uses the data and methods of a certain class. You realize
    that the code will look and work much better inside a new method in the class.
    But you can't add the method to the class because, for example, the class is located
    in a third-party library.
  prefs: []
  type: TYPE_NORMAL
- en: This refactoring has a big payoff when the code that you want to move to the
    method is repeated several times in different places in your program.
  prefs: []
  type: TYPE_NORMAL
- en: Since you're passing an object of the utility class to the parameters of the
    new method, you have access to all of its fields. Inside the method, you can do
    practically everything that you want, as if the method were part of the utility
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removes code duplication. If your code is repeated in several places, you can
    replace these code fragments with a method call. This is better than duplication
    even considering that the foreign method is located in a suboptimal place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The reasons for having the method of a utility class in a client class won't
    always be clear to the person maintaining the code after you. If the method can
    be used in other classes, you could benefit by creating a wrapper for the utility
    class and placing the method there. This is also beneficial when there are several
    such utility methods. [Introduce Local Extension](/introduce-local-extension)
    can help with this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new method in the client class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this method, create a parameter to which the object of the utility class
    will be passed. If this object can be obtained from the client class, you don't
    have to create such a parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the relevant code fragments to this method and replace them with method
    calls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be sure to leave the *Foreign method* tag in the comments for the method along
    with the advice to place this method in a utility class if such becomes possible
    later. This will make it easier to understand why this method is located in this
    particular class for those who'll be maintaining the software in the future.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
