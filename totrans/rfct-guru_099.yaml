- en: Pull Up Method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/pull-up-method](https://refactoringguru.cn/pull-up-method)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your subclasses have methods that perform similar work.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make the methods identical and then move them to the relevant superclass.
  prefs: []
  type: TYPE_NORMAL
- en: Before![Pull Up Method - Before](../Images/4f902fa84225b995e9c5b37ce6a8f189.png)After![Pull
    Up Method - After](../Images/0e414b953a4bd063f1739858a837d8fa.png)
  prefs: []
  type: TYPE_NORMAL
- en: Why Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Subclasses grew and developed independently of one another, causing identical
    (or nearly identical) fields and methods.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gets rid of duplicate code. If you need to make changes to a method, it's better
    to do so in a single place than have to search for all duplicates of the method
    in subclasses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This refactoring technique can also be used if, for some reason, a subclass
    redefines a superclass method but performs what's essentially the same work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Investigate similar methods in superclasses. If they aren't identical, format
    them to match each other.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If methods use a different set of parameters, put the parameters in the form
    that you want to see in the superclass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the method to the superclass. Here you may find that the method code uses
    fields and methods that exist only in subclasses and therefore aren''t available
    in the superclass. To solve this, you can:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For fields: use either [Pull Up Field](/pull-up-field) or Self-[Encapsulate
    Field](/encapsulate-field) to create getters and setters in subclasses; then declare
    these getters abstractly in the superclass.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For methods: use either [Pull Up Method](/pull-up-method) or declare abstract
    methods for them in the superclass (note that your class will become abstract
    if it wasn''t previously).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the methods from the subclasses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the locations in which the method is called. In some places you may be
    able to replace use of a subclass with the superclass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
