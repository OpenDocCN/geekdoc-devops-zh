- en: Switch Statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://refactoringguru.cn/smells/switch-statements](https://refactoringguru.cn/smells/switch-statements)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Signs and Symptoms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have a complex `switch` operator or sequence of `if` statements.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0f91a3c80bf69b3afccfc40c21d4f48e.png)'
  prefs: []
  type: TYPE_IMG
- en: Reasons for the Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Relatively rare use of `switch` and `case` operators is one of the hallmarks
    of object-oriented code. Often code for a single `switch` can be scattered in
    different places in the program. When a new condition is added, you have to find
    all the `switch` code and modify it.
  prefs: []
  type: TYPE_NORMAL
- en: As a rule of thumb, when you see `switch` you should think of polymorphism.
  prefs: []
  type: TYPE_NORMAL
- en: Treatment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To isolate `switch` and put it in the right class, you may need [Extract Method](/extract-method)
    and then [Move Method](/move-method).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a `switch` is based on type code, such as when the program's runtime mode
    is switched, use [Replace Type Code with Subclasses](/replace-type-code-with-subclasses)
    or [Replace Type Code with State/Strategy](/replace-type-code-with-state-strategy).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After specifying the inheritance structure, use [Replace Conditional with Polymorphism](/replace-conditional-with-polymorphism).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there aren't too many conditions in the operator and they all call same method
    with different parameters, polymorphism will be superfluous. If this case, you
    can break that method into multiple smaller methods with [Replace Parameter with
    Explicit Methods](/replace-parameter-with-explicit-methods) and change the `switch`
    accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If one of the conditional options is `null`, use [Introduce Null Object](/introduce-null-object).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payoff
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Improved code organization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/01300532ddcf0f8454f8c1e4fe08f997.png)'
  prefs: []
  type: TYPE_IMG
- en: When to Ignore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a `switch` operator performs simple actions, there's no reason to make
    code changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Often `switch` operators are used by factory design patterns ([Factory Method](/design-patterns/factory-method)
    or [Abstract Factory](/design-patterns/abstract-factory)) to select a created
    class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[</images/refactoring/banners/tired-of-reading-banner-1x.mp4?id=7fa8f9682afda143c2a491c6ab1c1e56>'
  prefs: []
  type: TYPE_NORMAL
- en: </images/refactoring/banners/tired-of-reading-banner.png?id=1721d160ff9c84cbf8912f5d282e2bb4>
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support HTML video.](/refactoring/course)
  prefs: []
  type: TYPE_NORMAL
- en: Tired of reading?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No wonder, it takes 7 hours to read all of the text we have here.
  prefs: []
  type: TYPE_NORMAL
- en: Try our interactive course on refactoring. It offers a less tedious approach
    to learning new stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Let''s see…*](/refactoring/course)'
  prefs: []
  type: TYPE_NORMAL
